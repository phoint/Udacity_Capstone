# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@8.2.1
  kubernetes: circleci/kubernetes@1.3.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  linting-code:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv .devops
            . .devops/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./.devops
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . .devops/bin/activate
            make lint
  create-cluster:
    docker: 
      - image: cimg/python:3.7.9
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          aws-region: ${AWS_DEFAULT_REGION}
          zones: us-east-1a,us-east-1b
          ssh-access: false
          ssh-public-key: ''

  deploy-application:
    docker: 
      - image: cimg/python:3.7.9
    parameters:
      cluster-name:
        description: Name of the EKS cluster
        type: string
      docker-image-name:
        description: Name of the docker image
        type: string
      version-info:
        description: App version information
        type: string
      aws-region:
        description: AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat template/deployment.yaml.template |\
            sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g;\
            s|BUILD_DATE_VALUE|$BUILD_DATE|g;\
            s|VERSION_INFO_VALUE|<< parameters.version-info >>|g" > template/deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "template/deployment.yaml"
          get-rollout-status: true
          watch-timeout: 1h
          resource-name: deployment/phoint-capstone
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: "template/service.yaml"
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  capstone-workflow-with-infra:
    jobs:
      - linting-code:
          filters:
            branches:
              only: deploy-infrastructure
      - aws-ecr/build-and-push-image:
          name: build-and-push-image
          executor: aws-ecr/default
          region: ${AWS_DEFAULT_REGION}
          repo: phoint-capstone-app
          dockerfile: Dockerfile
          path: ./src
          tag: ${CIRCLE_SHA1}
          filters:
            branches:
              only: deploy-infrastructure
          # Uncomment if the repository does not yet exist
          # create-repo: true
      - create-cluster:
          cluster-name: phoint-capstone
          requires:
            - linting-code
      # - aws-eks/create-cluster:
      #     name: create-cluster
      #     cluster-name: phoint-capstone
      #     requires:
      #       - linting-code


      - deploy-application:
          cluster-name: phoint-capstone
          aws-region: ${AWS_DEFAULT_REGION}
          docker-image-name: "${AWS_ECR_URL}/phoint-capstone-app:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - create-cluster

  capstone-workflow-without-infra:
    jobs:
      - linting-code:
          filters:
            branches:
              only: master
      - aws-ecr/build-and-push-image:
          name: build-and-push-image
          executor: aws-ecr/default
          region: ${AWS_DEFAULT_REGION}
          repo: phoint-capstone-app
          dockerfile: Dockerfile
          path: ./src
          tag: ${CIRCLE_SHA1}
          filters:
            branches:
              only: master

          # Uncomment if the repository does not yet exist
          # create-repo: true
      
      - deploy-application:
          cluster-name: phoint-capstone
          aws-region: ${AWS_DEFAULT_REGION}
          docker-image-name: "${AWS_ECR_URL}/phoint-capstone-app:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - build-and-push-image
      # - aws-eks/delete-cluster:
      #     cluster-name: phoint-capstone
      #     aws-region: $AWS_DEFAULT_REGION
      #     wait: true
      #     requires:
      #       - create-cluster
